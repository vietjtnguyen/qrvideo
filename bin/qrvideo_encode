#!/usr/bin/env python3
import argparse
import functools
import os.path
import subprocess
import sys
import tempfile


@functools.lru_cache()
def get_image_size(filename):
    '''
    Gets the width and height for the given image as a tuple using
    GraphicsMagick.
    '''
    args = ['gm', 'identify', filename, '-format', '%w %h']
    return tuple(map(int, subprocess.check_output(args).split()))


def main():
    parser = argparse.ArgumentParser(
        description= \
            'Creates a video from the list of images read from stdin and '
            'composites a QR code encoding the image name into each frame')

    parser.add_argument(
        '-r', '--image-root',
        dest='image_root', type=str, default='.',
        help='root path of the images listed in the input (default: .)')
    parser.add_argument(
        '-S', '--size',
        dest='size', type=lambda x: tuple(int(y) for y in x.split('x')),
        default=None,
        help= \
            'size of video as an "x" separated integer pair (e.g. '
            '"1920x1080"), input images are forcefully resized to this '
            '(default: size of first image in list)')
    parser.add_argument(
        '--frame-rate',
        dest='frame_rate', type=float, default=4,
        help='sets the output video framerate (default: 4)')
    parser.add_argument(
        '--gravity',
        dest='gravity', type=str, default='SouthWest',
        choices=[
            'NorthWest', 'North', 'NorthEast', 'West', 'Center', 'East',
            'SouthWest', 'South', 'SouthEast',
        ],
        help= \
            'sets the "gravity" for where the QR code is composited (default: '
            'SouthWest)')
    parser.add_argument(
        '--saved-frames-folder',
        dest='saved_frames_folder', type=str, default=None,
        help= \
            'by default the QR compositing and frame resizing results are '
            'piped directly to ffmpeg resulting in no intermediate frame '
            'files, specifying this option enables saving the frames to the '
            'folder specified (default: disabled, frames generated and piped '
            'directly to ffmpeg)')
    parser.add_argument(
        '--use-existing-frames',
        dest='use_existing_frames', default=False, action='store_true',
        help= \
            'must be paired with --saved-frames-folder option, skips '
            'compositing the frames and simply creates a video from the '
            'frames (named in "frame%%07d.png" format) in the folder '
            'specified by --saved-frames-folder (default: disabled, do '
            'generate frames)')
    parser.add_argument(
        '-o', '--output',
        dest='output', type=str, required=True,
        help='output file, "output.mp4" typically works nicely (required)')

    args = parser.parse_args()

    if args.size is not None and len(args.size) != 2:
        raise RuntimeError(
            '--size option must parse to a two item integer pair separated by '
            'an x (size specified: {})'.format(args.size))

    if args.saved_frames_folder is None:
        if args.use_existing_frames:
            raise RuntimeError(
                '--saved-frames-folder must be specified if '
                '--use-existing-frames is specified')
    else:
        if not os.path.exists(args.saved_frames_folder):
            raise RuntimeError(
                '--saved-frames-folder folder does not exist ({})'.format(
                    args.saved_frames_folder))

    if not args.use_existing_frames:

        try:
            image_list = [x.strip() for x in sys.stdin]
        except BrokenPipeError:
            pass
        if len(image_list) == 0:
            return 0

        if args.size is None:
            args.size = \
                get_image_size(os.path.join(args.image_root, image_list[0]))
        args.size = 'x'.join(str(x) for x in args.size)

    frames_saved_to_file = args.saved_frames_folder is not None


    if frames_saved_to_file:
        if not args.use_existing_frames:
            returncode = generate_frames_to_file(args, image_list)
            if returncode != 0:
                return returncode
        return create_video_from_saved_frames(args)
    else:
        proc = generate_frames_to_pipe(args, image_list)
        return create_video_from_pipe(args, proc)

def generate_frames_to_file(args, image_list):
    proc = generate_frames(args, image_list, True)
    try:
        proc.wait()
    except KeyboardInterrupt:
        proc.kill()
    return proc.returncode

def generate_frames_to_pipe(args, image_list):
    return generate_frames(args, image_list, False)

def generate_frames(args, image_list, save_to_file):
    proc = subprocess.Popen(
        ['parallel', '-k', '--bar', 'bash', '-c', '{}'],
        stdin=subprocess.PIPE,
        stdout=subprocess.PIPE)

    for i, image in enumerate(image_list):
        image_path = os.path.join(args.image_root, image)
        if save_to_file:
            output_path = os.path.join(
                args.saved_frames_folder, 'frame{:07d}.png'.format(i))
        else:
            output_path = 'png:-'
        command = (
            'qrencode -s 2 -m 1 -o - "{}" | '
            'gm composite png:- -gravity {} "{}" -resize {} {}'
            '\n').format(
                image, args.gravity, image_path, args.size, output_path)
        proc.stdin.write(command.encode('utf8'))
    proc.stdin.close()

    return proc

def create_video_from_saved_frames(args):
    proc = subprocess.Popen(
        [
            'ffmpeg',
            '-framerate', str(args.frame_rate), # sets output framerate
            '-i', os.path.join(args.saved_frames_folder, 'frame%07d.png'),
            '-r', str(args.frame_rate), # sets output framerate
            '-c:v', 'libx264', # H.264 encoding
            '-pix_fmt', 'yuv420p', # specific pixel format, supports QuickTime
            args.output,
        ],
        stdin=subprocess.DEVNULL)

    try:
        proc.wait()
    except KeyboardInterrupt:
        proc.kill()
    return proc.returncode

def create_video_from_pipe(args, input_proc):
    proc = subprocess.Popen(
        [
            'ffmpeg',
            '-f', 'image2pipe', # images come in raw over the pipe
            '-framerate', str(args.frame_rate), # sets output framerate
            '-i', '-', # read from stdin
            '-r', str(args.frame_rate), # sets output framerate
            '-c:v', 'libx264', # H.264 encoding
            '-pix_fmt', 'yuv420p', # specific pixel format, supports QuickTime
            args.output,
        ],
        stdin=input_proc.stdout)

    try:
        proc.wait()
    except KeyboardInterrupt:
        proc.kill()
        input_proc.kill()
    return proc.returncode

if __name__ == '__main__':
    main()
